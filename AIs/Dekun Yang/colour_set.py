from monopyly import *from collections import defaultdict, Counterfrom operator import itemgetterfrom .priority_queue import PriorityQueueclass ColourSetProfile(object):    NAME = "Name"    RETURN_ON_INVESTMENT = "Roi"    COST = "Cost"    BENEFIT = "Rtn"    UNMORTGAGE_COST = "Mtg"    BUY_FULL_SET_COST = "Buy"    NUMBER_OF_HOUSE = "House"    def __init__(self, game_state, player):        self.holder = player        self.enums = game_state.board._property_set_map.keys()        self.profile = defaultdict(ColourSet)        for ps in self.enums:            self.profile[ps] = ColourSet(ps, self.holder)        self.landed_prob = defaultdict(float)        self.landed_prob[PropertySet.BROWN] = 2.14 + 2.18        self.landed_prob[PropertySet.LIGHT_BLUE] = 2.27 + 2.33 + 2.31        self.landed_prob[PropertySet.PURPLE] = 2.72 + 2.29 + 2.57        self.landed_prob[PropertySet.ORANGE] = 2.79 + 2.91 + 2.85        self.landed_prob[PropertySet.RED] = 2.66 + 2.62 + 3.07        self.landed_prob[PropertySet.YELLOW] = 2.60 + 2.58 + 2.51        self.landed_prob[PropertySet.GREEN] = 2.85 + 2.91 + 2.79        self.landed_prob[PropertySet.DARK_BLUE] = 2.29 + 2.72        self.stat = None        self.my_target = []        self.target_profile = defaultdict(list)    def update(self, game_state):        for ps in self.enums:            self.profile[ps].update(game_state)        self.stat = Counter()        for ps in self.enums:            if ps is not PropertySet.UTILITY and ps is not PropertySet.STATION:                self.stat[self.profile[ps].tag] += 1    def generate_target_profile(self, game_state):        for ply in game_state.players:            self.target_profile[ply] = []        for ps in self.enums:            if ps is not PropertySet.UTILITY and ps is not PropertySet.STATION:                unmortgage_cost, buy_full_set_cost, build_house_cost, benefit, number_of_houses = 0, 0, 0, 0, 0                tag, factor = self.profile[ps].tag, self.profile[ps].factor                owner = None                if tag is ColourSet.MY_HALF or tag is ColourSet.OTHERS_HALF:                    for p in self.profile[ps].property_set.properties:                        build_house_cost += p.house_price                        benefit += p.rents[1]                        if p.owner is not None:                            owner = p.owner                            if p.is_mortgaged:                                unmortgage_cost += int(1.1 * p.mortgage_value)                        else:                            buy_full_set_cost += p.house_price                    cost = buy_full_set_cost + unmortgage_cost + build_house_cost                    return_on_investment = int(self.landed_prob[ps] * benefit / cost)                    tgt = {}                    tgt[self.NAME] = ps                    tgt[self.RETURN_ON_INVESTMENT] = return_on_investment                    tgt[self.BENEFIT] = benefit                    tgt[self.COST] = cost                    tgt[self.BUY_FULL_SET_COST] = buy_full_set_cost                    tgt[self.UNMORTGAGE_COST] = unmortgage_cost                    tgt[self.NUMBER_OF_HOUSE] = number_of_houses                    self.target_profile[owner].append(tgt)                elif tag is ColourSet.MY_FULL or tag is ColourSet.OTHERS_FULL:                    number_of_houses = self.profile[ps].property_set.properties[0].number_of_houses                    owner = self.profile[ps].property_set.properties[0].owner                    for p in self.profile[ps].property_set.properties:                        build_house_cost += p.house_price                        if number_of_houses < 5:                            benefit += (p.rents[number_of_houses + 1] - p.rents[number_of_houses])                        if p.is_mortgaged:                            unmortgage_cost += int(1.1 * p.mortgage_value)                    cost = buy_full_set_cost + unmortgage_cost + build_house_cost                    return_on_investment = int(self.landed_prob[ps] * benefit / cost)                    tgt = {}                    tgt[self.NAME] = ps                    tgt[self.RETURN_ON_INVESTMENT] = return_on_investment                    tgt[self.BENEFIT] = benefit                    tgt[self.COST] = cost                    tgt[self.BUY_FULL_SET_COST] = buy_full_set_cost                    tgt[self.UNMORTGAGE_COST] = unmortgage_cost                    tgt[self.NUMBER_OF_HOUSE] = number_of_houses                    self.target_profile[owner].append(tgt)        for ply in game_state.players:            self.target_profile[ply].sort(key=itemgetter(ColourSetProfile.RETURN_ON_INVESTMENT), reverse=True)    def select_target(self):        self.my_target = [candidate for candidate in self.target_profile[self.holder]                          if candidate[self.BUY_FULL_SET_COST] == 0 and candidate[self.NUMBER_OF_HOUSE] < 5]    def show_target(self):        Logger.log("~ Targets: {0}".format(self.my_target))    def buy_candidates(self):        candidates = PriorityQueue()        for ps in self.enums:            if ps is not PropertySet.UTILITY and ps is not PropertySet.STATION:                factor = self.profile[ps].factor                priority = 10                if factor == 80:                    for p in self.profile[ps].property_set.properties:                        if p.owner is not None and p.owner is not self.holder:                            candidates.push(p, priority)        return candidates    def sell_candidates(self, game_state):        others = [ply for ply in game_state.players if ply is not self.holder]        candidates = PriorityQueue()        for ps in self.enums:            tag = self.profile[ps].tag            number_of_owners = self.profile[ps].number_of_owners            if tag is ColourSet.MY_MIX:                buyers = others                for p in self.profile[ps].property_set.properties:                    if p.owner in buyers:                        buyers.remove(p.owner)                for p in self.profile[ps].property_set.properties:                    if p.owner is not None and p.owner is self.holder:                        for buyer in buyers:                            candidates.push((p, buyer), number_of_owners)        return candidates    def mortgage_candidates(self, excluded=set()):        candidates = PriorityQueue()        for ps in self.enums:            if ps not in excluded:                factor = self.profile[ps].factor                if factor <= 110:                    for p in self.profile[ps].property_set.properties:                        if p.owner is self.holder and not p.is_mortgaged:                            candidates.push(p, -factor)        return candidates    def money_to_be_raised_to_build_house(self, set_to_build):        to_be_raised = 0        for ps in self.enums:            if ps not in set_to_build:                tag = self.profile[ps].tag                factor = self.profile[ps].factor                if tag is ColourSet.MY_MIX or tag is ColourSet.MY_HALF:                    if factor <= 110:                        for p in self.profile[ps].property_set.properties:                            if p.owner is self.holder and not p.is_mortgaged:                               to_be_raised += p.mortgage_value        return to_be_raised    def unmortgage_candidates(self):        candidates = PriorityQueue()        for ps in self.enums:            if self.profile[ps].factor < 105:                properties = []                cost = 0                for p in self.profile[ps].property_set.properties:                    if p.owner is self.holder and p.is_mortgaged:                        properties.append(p)                        cost += int(1.1 * p.mortgage_value)                if len(properties) > 0:                    candidates.push((properties, cost), -cost)        return candidates    def sell_house_candidates(self):        candidates = PriorityQueue()        for ps in self.enums:            factor = self.profile[ps].factor            if 110 < factor <= 160:                properties = []                number_of_houses = self.profile[ps].property_set.properties[0].number_of_houses                house_price = self.profile[ps].property_set.properties[0].house_price                priority = number_of_houses                if priority < 4:                    priority = 10 - priority                else:                    priority = 10 + priority                for p in self.profile[ps].property_set.properties:                    properties.append(p)                candidates.push((properties, number_of_houses, house_price), priority)        return candidates    def show(self, game_state):        self.show_target()        for ply in game_state.players:            Logger.log("~ TP {0}:  {1}".format(ply, self.target_profile[ply]))        Logger.log("~ {0}".format(self.stat))        for ps in self.enums:            tag = self.profile[ps].tag            if tag is not ColourSet.EMPTY:                self.profile[ps].show()class ColourSet(object):    EMPTY = "Empty"    MY_FULL = "My_Full"    MY_HALF = "My_Half"    MY_MIX = "My_Mix"    OTHERS_FULL = "Others_Full"    OTHERS_HALF = "Others_Half"    OTHERS_MIX = "Others_Mix"    def __init__(self, property_set_enum, player):        self.holder = player        self.property_set_enum = property_set_enum        self.property_set = None        self.tag = None        self.factor = 0        self.number_of_unowned_properties = 0        self.number_of_properties_i_owned = 0        self.number_of_owners = 0        self.owners = set()    def update(self, game_state):        self.property_set = game_state.board.get_property_set(self.property_set_enum)        # get owner info        self.owners.clear()        self.number_of_unowned_properties = 0        self.number_of_properties_i_owned = 0        for p in self.property_set.properties:            if p.owner is not None:                self.owners.add(p.owner)                if p.owner is self.holder:                    self.number_of_properties_i_owned += 1            else:                self.number_of_unowned_properties += 1        self.number_of_owners = len(self.owners)        # analyse the set        if len(self.owners) == 0:            self.tag = self.EMPTY            self.factor = 1        elif self.holder in self.owners and len(self.owners) == 1 and self.number_of_unowned_properties == 0:            if self.property_set_enum is PropertySet.STATION or self.property_set_enum is PropertySet.UTILITY:                self.factor = 100            else:                if self.property_set.all_properties_are_unmortgaged:                    self.factor = 110 + 10 * self.property_set.properties[0].number_of_houses                else:                    self.factor = 105            self.tag = self.MY_FULL        elif self.holder in self.owners and len(self.owners) == 1:            self.factor = 100 - 5 * self.number_of_unowned_properties            self.tag = self.MY_HALF        elif self.holder in self.owners:            self.factor = 80 - 10 * (len(self.owners) - 2) + self.number_of_unowned_properties            self.tag = self.MY_MIX        elif len(self.owners) == 1 and self.number_of_unowned_properties == 0:            self.factor = 0            self.tag = self.OTHERS_FULL        elif len(self.owners) == 1:            self.factor = 40 + 5 * self.number_of_unowned_properties            self.tag = self.OTHERS_HALF        else:            self.factor = 20 + 5 * self.number_of_unowned_properties            self.tag = self.OTHERS_MIX    def show(self):        Logger.log("~{0},  {1},  {2}".format(self.property_set_enum, self.tag, self.factor))        Logger.indent()        if self.tag is self.MY_FULL or self.tag is self.OTHERS_FULL:            if self.property_set.set_enum is not PropertySet.STATION and self.property_set.set_enum is not PropertySet.UTILITY:                for p in self.property_set.properties:                    Logger.log("  {0}, {1}, {2}, {3}".format(p, p.owner, p.is_mortgaged, p.number_of_houses))            else:                for p in self.property_set.properties:                    Logger.log("  {0}, {1}, {2}".format(p, p.owner, p.is_mortgaged))        else:            for p in self.property_set.properties:                Logger.log("  {0}, {1}, {2}".format(p, p.owner, p.is_mortgaged))        Logger.dedent()