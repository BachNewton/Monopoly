TODOs
-----


# TODO: What happen if a deal transfers a property with houses on it,
        but not the whole set?

# TODO: calculate the ms/turn over a *tournament*


Message format
--------------
Messages are proto-bufs, with an initial byte which indicates
what type of message it is.

The receiver can look at the first byte, and use this to decide
which decoder to use.


Messages for the GUI
--------------------
a. "Hello" to make the connection.
   Code: 0
   Payload: none

b. Start of tournament
   Code: 1
   Payload: [player-name] (in order of player-number, 0-3))

c. Start of game
   Code: 2
   Payload: none

d. Player-info (sent at end of round)
   Code: 3
   Payload: [(player-number, net-worth, games-won, ms-per-turn)]

e. Board update (sent at end of round)
   Code: 4
   Payload: [(square_number, owner_number, mortgaged, number_of_houses)]


Message classes
---------------
a. Proto-bufs for messages b, d, e

b. MessagingServer at the Python end.
   - Instance passed to the Tournament object
   - If it is not null, we send messages.

c. MessagingClient at the C# end.


Data sent to the GUI
--------------------

- Should we send the logs?
  - Why not?

- Main thing is the board, though and the game state
  - Who owns each square
  - How many houses on each square
  - Net worth of each player

- What will the GUI show?
  - The board
  - We can assign colours to the players and show the colour
    on each square owned by that player
  - Houses
  - Where each player is
  - Whether the player is in jail

- How often should we send updates?
  - At the end of each turn

- How do we send player info?
  - Identified by player name would be best.
  - But will this repeat the player name too much
    - Not that that is a huge problem.
  - All data can be keyed by player?

- Maybe assign each player a number at the start of the game
  - send a message at the start with player_number -> name dictionary
  - GUI can assign colors

- Each turn
  - We send the Board
    - [(square_number, owner_number, mortgaged, number_of_houses)]
  - We send player info
    - [(player_number, net-worth)]

- We need a start-of-game signal to tell the graphs to reset.

- ZMQ has the annoying feature of missing startup messages.
  - So we need to make sure that we are connected before the game engine
    starts sending data to the GUI.
  - I don't think that ZMQ has a built-in mechanism for this, so we need
    to come up with a protocol.
  - I'll do what it suggests at: http://zguide.zeromq.org/page:all#Node-Coordination
  - There will be a GUIPublisher class
    - It will have a connect() method
    - This publishes "hello" messages every second on the channel that will
      be used for updates.
    - The GUI listens for these messages. When it gets one, it knows that it is
      connected.
    - The GUI tells the publisher that it is connected via a REQ/REP message






















